# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ master ]
    tags:
      - "v*.*.*"
      - "preview*"
      - "dev*"

jobs:
  build:
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: HotPotPlayer                       # Replace with your solution name, i.e. MyWpfApp.sln.
      Project_Directory: HotPotPlayer
      Configuration: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'true'
    
    # - name: Use Dev Package
    #   run: Move-Item -Force (Join-Path -Path $env:Project_Directory -ChildPath Package.Dev.appxmanifest) (Join-Path -Path $env:Project_Directory -ChildPath Package.appxmanifest)

    - name: Setup version
      uses: mingjun97/file-regex-replace@v1
      with:
        regex: 'Version="1.0.0.0"'
        replacement: 'Version="0.${{ github.run_number }}.${{ github.run_attempt }}.0"'
        include: Package.appxmanifest

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2
      with:
        vs-prerelease: true
        msbuild-architecture: x64

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath HotPotPlayer_TemporaryKey.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        Get-ChildItem $env:Project_Directory

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      # run: msbuild $env:Solution_Name /p:RuntimeIdentifier=win10-x64 /p:AppxBundlePlatforms=$env:Appx_Bundle_Platforms /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=HotPotPlayer_TemporaryKey.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=HotPotPlayer_TemporaryKey.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Appx_Bundle_Platforms: x64
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ env.Configuration }}
        Platform: x64

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path (Join-Path -Path $env:Project_Directory -ChildPath HotPotPlayer_TemporaryKey.pfx)

    - name: Create GH release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: '0.${{ github.run_number }}.${{ github.run_attempt }}.0'
        tag_name: 'v0.${{ github.run_number }}.${{ github.run_attempt }}.0'
        body: '安装方法同 https://github.com/Richasy/Bili.Uwp/wiki/%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85%E5%93%94%E5%93%A9%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E#%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8%E5%BA%94%E7%94%A8%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F-app-installer'
        files: |
          ${{ env.Project_Directory }}/Packages/**/HotPotPlayer*.msix
          ${{ env.Project_Directory }}/Packages/**/HotPotPlayer*.cer
        fail_on_unmatched_files: true
